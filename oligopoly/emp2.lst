GAMS 31.1.1  r4b06116 Released May 16, 2020 DEX-DEG x86 64bit/Mac OS X - 06/25/20 19:21:54 Page 1
Oligopoly : Cournot, Bertrand and Stackelberg
C o m p i l a t i o n


      Kristian Chavira,  Jung Shin,  Gerard Biehl
      (oligop_MPC_MPEC.gms)
      CS 635 - Case Study
      We have the following economic models and associated GAMS models;
         CES & MCP  - Cournot
         CES & MPEC - Stackelberg
      Linear & MCP  - Bertrand
      References
      Dirkse, S P, and Ferris, M C, MCPLIB: A Collection of Nonlinear Mixed
             Complementarity Problems. Optimization Methods and Software 5 (1995),
             319-345.
      (NASH,SEQ=269) - GAMS MODEL LIBRARY VARIANT
      - display for the Stackelberg model is due to this GAMS library model
        which was introduced in the above paper with only the Cournot model
  18   
  19  *-------------------------------------------------------------------------------------------
  20  * CES - COURNOT & STACKELBERG MODEL - 2 or more
  22  SETS
  23  i                "Cournot & Stackelberg firms"    / 1*3 /
  24  lead(i) /1/;
  26  set
  27  leader(i)        "Stackelberg-leader"
  28  ;
  30  TABLE fData(i,*) "CES data for firms"
  31     c L  beta
  32  1  5 5  1.1
  33  2  5 10  1.2
  34  3  5 15  1.3
  35  ;
  36  SCALARS
  37  * gamma > 1
  38  gamma   "Demand Elasticity"            / 1.3 /
  39  dbar    "Reference Unit Price Demand"  / 2000 / ;
  41  PARAMETERS
  42  c(i)    "Firm's Unit Production Cost"
  43  L(i)    "Labor Coefficient"
  44  beta(i) "Supply Elasticity"
  45  ;
  46  c(i) = fData(i, "c") ;
  47  L(i) = fData(i, "L") ;
  48  beta(i) = fData(i, "beta") ;
  49  alias (i,j,k) ;
  50  NONNEGATIVE VARIABLES
  51  q(i)   "Production Vector - for all models";
  52  VARIABLES
  53  obj(i) 'objective function for firm i'
  54  p      "Market Clearing Price - Cournot & Stackelberg"
  55  z      "Stackelberg-leader Profit" ;
  56  EQUATIONS
  57  defobj_Cour(i)     "define objective function for firm i in Cournot"
  58  defobj_Stac(i)     "define objective function for firm i in stackelberg"
  59  prod_def         "Total Production Definition"
  60  obj_eq           "maximised Stackleberg-leader Profit"
  61  ;
  62  *-------------------------------------------------------------------------------------------
  63  * Cournot     - MPC complementarity defintion,
  64  * Stackelberg - MPEC second level complementarity definition
  65  prod_def..
  66           p =E= (dbar/sum(j, q(j)))**(1/gamma) ;
  67  defobj_Cour(i)..
  68   obj(i) =e= q(i) *p-c(i)*q(i) -((beta(i)/(1+beta(i)))*L(i)**(1/beta(i)))*q(i)**((1+beta(i))/beta(i))     ;
  69   
  70  defobj_Stac(i)$(not Leader(i))..
  71  obj(i) =e= q(i) *(dbar/sum(j, q(j)))**(1/gamma)-c(i)*q(i) -((beta(i)/(1+beta(i)))*L(i)**(1/beta(i)))*q(i)**((1+beta(i))/beta(i));
  72  *-------------------------------------------------------------------------------------------
  73  * Stackelberg - MPEC first level optimisation
  74   
  75  obj_eq..
  76           z =E= sum(leader(i), q(i)*p - q(i)*c(i) - ((beta(i)/(1+beta(i)))*L(i)**(1/beta(i)))*q(i)**((1+beta(i))/beta(i))) ;
  77  *-------------------------------------------------------------------------------------------
  78   
  79  model Cournot      / defobj_Cour,prod_def / ;
  80   
  81  File myinfo /'/Users/ferris/Projects/GAMS-MIRO/oligopoly/225a/empinfo.dat'/;
  82  put myinfo 'equilibrium';
  83  put 'implicit p prod_def';
  84  loop(i,
  85     put / 'max', obj(i), q(i),p, defobj_Cour(i);
  86  );
  87   
  88  putclose myinfo;
  89   
  90   
  91  * allow domain violations in DNLP subsolvers
  92  option domlim = 50;
  94   
  95   
  96  *-------------------------------------------------------------------------------------------
  97  * Model solve and display for Cournot Case
  98  p.l = 1 ;
  99  q.l(i) = 1 ;
 100  leader(i) = no ;
 101  solve Cournot using emp ;
 102  * Cournot Quantities
 103  display q.l, p.l ;
 104  set CourHeader / quantity, price ,profit, gamma, dbar,cost,beta,l/;
 106  table resultCour(i,CourHeader);
 108  resultCour(i,'quantity')=q.l(i);
 109  resultCour(i,'price')=p.l;
 110  resultCour(i,'profit')=q.l(i) *p.l-c(i)*q.l(i) -((beta(i)/(1+beta(i)))*L(i)**(1/beta(i)))*q.l(i)**((1+beta(i))/beta(i));
 111  resultCour(i,'gamma')=gamma;
 112  resultCour(i,'dbar')=dbar;
 113  resultCour(i,'cost')=c(i);
 114  resultCour(i,'beta')=beta(i);
 115  resultCour(i,'l')=L(i);
 116   
 117  *-------------------------------------------------------------------------------------------
 118  * Model solve and display for Stackelberg Case
 119  *   NOTE
 120  *   This display procedure is due entirely to the GAMS MODEL LIBRARY (NASH,SEQ=269)
 121  *   In the course of developing this Case Study we discovered the model posting and
 122  *   found it to be better than anything we could formulate. So we took it
 123  *   exactly instead of changing it so we could give credit where credit is due
 124   
 125  * 'profit' display table
 126  * The table has row 'i' and columns 'k'
 127  * The "Cournot" column gives the profit of firm 'i' and the market price under Cournot
 128  * the row indices give the firm 'i'
 129  * The columns labeled k=[1, 2, 3] give the incidences where firm 'k' is the
 130  * Stackelberg leader.  The rows are as before
 131   
 132  * 'profitX' display table
 133  * The table gives the percentage change for each column against the Cournot case
 134  * that is 100*data(i,j)/data(i,"Cournot")
 135   
 136  * 'quantity' procedure same as 'profit'
 137   
 138  model Stackelberg / defobj_Stac, obj_eq,prod_def / ;
 139  sets StacHeader /CourQuantity 'quantity when not a leader firm',StacQuantity 'quantity when as a leader firm',
 140                  CourProfit 'profit when not a leader firm', StacProfit 'profit when as a leader firm'/;
 141   
 143  table resultStac(i,Stacheader) 'Difference between Cournot and Stackelberg model';
 145  leader(k) = no;
 146  loop(k,
 147       leader(k) = yes ;
 148       p.l=1;
 149       q.l(i)=1;
 150  put myinfo 'bilevel', q(k);
 151  loop(i$(not Leader(i)),
 152     put  / 'max', obj(i), q(i), defobj_Stac(i);
 153  );
 154  putclose myinfo;
 155   
 156  solve Stackelberg using emp maximizing z;
 157  resultStac(k,'StacQuantity')=q.l(k);
 158  resultStac(k,'StacProfit')=z.l;
 159  leader(k) = no ;
 160  );
 161   
 162  resultStac(i,'CourQuantity')=resultCour(i,'quantity');
 163  resultStac(i,'CourProfit')=resultCour(i,'profit');
 164   
 165  Equation obj_subStac(i);
 166  obj_subStac(i)$(not lead(i))..
 167  obj(i) =e= q(i) *(dbar/sum(j, q(j)))**(1/gamma)-c(i)*q(i) -((beta(i)/(1+beta(i)))*L(i)**(1/beta(i)))*q(i)**((1+beta(i))/beta(i));
 168   
 169  model subStackelberg /obj_subStac/;
 170  set linfoHeader /lquantity,lprofit,nprofit/
 171      ninfoHeader /lquantity,lprofit,nprofit,nquantity/;
 172   
 173  set grid /1*20/
 174   nonlead(i);
 175   nonlead(i)$(not lead(i))=yes;
 177  table linfo_stac(lead,grid,linfoheader) lead firm info;
 178  table ninfo_stac(i,grid,ninfoheader) Nonleader firm info;
 180  ninfo_stac(nonlead,grid,'nquantity')=resultCour(nonlead,'quantity');
 181  loop(grid,
 182  p.l=1;
 183  q.l(i)=1;
 184  q.fx(lead)=resultStac(lead,'StacQuantity')*(1/2+grid.val/20);
 185  put myinfo 'equilibrium';
 186  loop(i$(not lead(i)),
 187  put /'max', obj(i),q(i),obj_subStac(i);
 188  );
 189  putclose myinfo;
 190  solve subStackelberg using emp;
 191  linfo_stac(lead,grid,'lquantity')=q.l(lead);
 192  linfo_stac(lead,grid,'lprofit')=q.l(lead) *(dbar/sum(j, q.l(j)))**(1/gamma) -c(lead)*q.l(lead) -
 193  ((beta(lead)/(1+beta(lead)))*L(lead)**(1/beta(lead)))*q.l(lead)**((1+beta(lead))/beta(lead));
 194  linfo_stac(lead,grid,'nprofit')=q.l(lead) *(dbar/(q.l(lead)+sum(j$(not lead(j)), resultCour(j,'quantity'))))**(1/gamma) -c(lead)*q.l(lead) -
 195  ((beta(lead)/(1+beta(lead)))*L(lead)**(1/beta(lead)))*q.l(lead)**((1+beta(lead))/beta(lead));
 196  ninfo_stac(nonlead,grid,'lquantity')=sum(lead,q.l(lead));
 197  ninfo_stac(nonlead,grid,'lprofit')=obj.l(nonlead);
 198  ninfo_stac(nonlead,grid,'nprofit')= resultCour(nonlead,'quantity') *(dbar/(sum(lead,q.l(lead))+sum(j$(nonlead(j)), resultCour(j,'quantity'))))**(1/gamma)  -c(nonlead)*resultCour(nonlead,'quantity') -
 199  ((beta(nonlead)/(1+beta(nonlead)))*L(nonlead)**(1/beta(nonlead)))*resultCour(nonlead,'quantity')**((1+beta(nonlead))/beta(nonlead));
 200  );
 201   
 202   
 203  *-------------------------------------------------------------------------------------------
 204   
 205  *-------------------------------------------------------------------------------------------
 206  * CONTINUOUS BERTRAND MODEL - 2 or more firms
 207  * Note, this model could use price elasticites to define the weights 'w' and be more
 208  * realistic but we simply assign 'w' so as to not confuse the models.
 209  * The prediction of the LINEAR price competition model does not have a meaningful
 210  * comparison to the CES quantity competition models
 211   
 212  SETS d  "Bertrand firms"  / 1*2 / ;
 214  TABLE jData(d,*)
 215     w   c
 216  1  15  12
 217  2  7   11
 218  ;
 219  SCALARS
 220  dBert     "unit reference demand - BERTRAND"  / 1000 / ;
 222  PARAMETERS
 223  alpha       "calibrated Bertrand demand"
 224  delta1      "elasticity - firm 1 price"
 225  delta2      "elasticity - firm 2 price"
 226  ;
 227  alpha = (dBert*jData("1","w") - dBert*jData("2","w") )/( jData("1","w")**2 - jData("2","w")**2 ) ;
 228  delta1 = jData("1","w")/( jData("1","w")**2 - jData("2","w")**2 ) ;
 229  delta2 = jData("2","w")/( jData("1","w")**2 - jData("2","w")**2 ) ;
 230  NONNEGATIVE VARIABLES
 231   p1         "unit selling price - firm 1"
 232   p2         "unit selling price - firm 2"
 233   q1         "quantity sold - firm 1"
 234   q2         "quantity sold - firm 2"
 235   prof1      "quantity sold - firm 1"
 236   prof2      "quantity sold - firm 2"
 237  ;
 238  EQUATIONS
 239  prof1_eq    "equilibrium profit - firm 1"
 240  prof2_eq    "equilibrium profit - firm 2"
 241  quan1_eq    "demand for products - firm 1"
 242  quan2_eq    "demand for products - firm 2"
 243  ;
 244  quan1_eq..
 245           q1 =E= alpha - delta1*p1 + delta2*p2 ;
 246  quan2_eq..
 247           q2 =E= alpha - delta1*p2 + delta2*p1 ;
 248   
 249  prof1_eq..
 250           prof1 =E= p1*q1 - jData("1","c")*q1 ;
 251  prof2_eq..
 252           prof2 =E= p2*q2 - jData("2","c")*q2 ;
 253  MODEL BertrandMCP  / quan1_eq, quan2_eq,
 254                       prof1_eq, prof2_eq / ;
 255   
 256  put myinfo 'equilibrium';
 257  put /'max',prof1,p1,q1,quan1_eq,prof1_eq;
 258  put /'max',prof2,p2,q2,quan2_eq,prof2_eq;
 259  putclose myinfo;
 260  SOLVE BertrandMCP using emp ;
 261  set BertHeader /price,quantity,profit/;
 263  table resultBert(d,grid,BertHeader) Quantity and profits w.r.t the price of firm 1;
 265  loop(grid,
 266  resultBert(d,grid,'price')=p1.l*(1/2+grid.val/20);
 267  resultBert('1',grid,'quantity')=alpha-delta1*resultBert('1',grid,'price')+delta2*p2.l;
 268  resultBert('2',grid,'quantity')=alpha+delta2*resultBert('2',grid,'price')-delta1*p2.l;
 269  resultBert('1',grid,'profit')=resultBert('1',grid,'price')*resultBert('1',grid,'quantity')-jData("1","c")*resultBert('1',grid,'quantity');
 270  resultBert('2',grid,'profit')=p2.l*resultBert('2',grid,'quantity')-jData("2","c")*resultBert('2',grid,'quantity');
 271  )
 272   


COMPILATION TIME     =        0.003 SECONDS      3 MB  31.1.1 r4b06116 DEX-DEG


USER: Michael C. Ferris                              S200127/0001AN-GEN
      University of Wisconsin-Madison, Computer Sciences Dept.DCE000472
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /Users/ferris/Projects/GAMS-MIRO/oligopoly/emp2.gms
Output     /Users/ferris/Projects/GAMS-MIRO/oligopoly/emp2.lst
