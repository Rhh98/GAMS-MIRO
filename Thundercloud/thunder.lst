GAMS 30.2.0  r482c588 Released Feb  7, 2020 WEX-WEI x86 64bit/MS Windows - 06/17/20 17:01:18 Page 1
airplane
C o m p i l a t i o n


   2   
      airplane network model with nodes for 1 to 1300 for 100 miles by 12,000 feet
      split nodes as (ht in thousand feet)*100 + nautical miles
       
      some errors in offset due to missing out 4000 feet data
   9   
  10  sets
  11      CandN /1*1299,start,finish,c1,c2,c3/
  12     Nodes(CandN) /1*1299,start,finish/
  13     N(nodes) /1*1299/
  14     Arcs(nodes,nodes)
  15     clouds(CandN) /c1*c3/
  16  ;
  17   
  18  parameters
  19    c(Nodes, Nodes)
  20    xcoord(Nodes)
  21    zcoord(Nodes)
  22    b(Nodes);
  23   
  24  set cloudInf /xc 'x coordinate', low 'lower bound of the cloud', high 'higher bound of the cloud'/
  25  height /2 ,4 ,6 ,8 ,10 ,12/
  26  upheight(height)/2 ,4, 6, 8, 10/
  27  downheight(height)/4,6,8,10,12/;
  28  scalar  Groundheight /0/;
  29  set s singular set /1/;
  31  parameter cloudsInfo(clouds,cloudInf) Information of thunderstorm
  32  /c1.xc 21,c2.xc 71,c3.xc 72,c1.low 3,c2.low 6, c3.low 6,c1.high 8, c2*c3.high 12/;
  33  parameter
  34  crcost(height) cost to cruise /2 1.36, 4 1.34,6 1.31, 8 1.29,10 1.27,12 1.25/
  35  climbDis(upheight) nautical distance to climb 2k feet /2 5, 4 5,6 6,8 7, 10 10/
  36  upcost(upheight) cost of going up 2k feet at 'upheight' /2 10.2,4 11.42, 6 13.42, 8 17.23,10 19.7/
  37  downcost(downheight) cost of going down 2k feet at 'downheight' /4 12.3, 6 12.5, 8 12.4, 10 12.2, 12 11.8/;
  38  ;
  39  parameter
  40   minheight /200/
  41   
  42  *this is how far about crusing decisions are made at and costs above should same distance in offsetcr
  43    offsetcr(s) cruise distance /1 1/
  44   
  45    descendDis(s) nautical distance to descend 2k feet /1 10/;
  46   
  48  *min height of the aircraft (height in thousand of feet)*length of x e.g. 2,000 feet and 100 miles is 2*100=200
  49   
  50  parameter
  51    xcoordcloud(clouds) horizontal position of clouds  /c1 21,c2 71,c3 72/
  52    lowcloud(clouds) height of bottom of the cloud (100 feet) /c1 3, c2 6, c3 6/
  53    highcloud(clouds) height of top of the cloud (100 feet) /c1 8, c2 12, c3 12/
  54    ;
  55    xcoordcloud(clouds)=cloudsInfo(clouds,'xc');
  56    lowcloud(clouds)=cloudsInfo(clouds,'low');
  57    highcloud(clouds)=cloudsInfo(clouds,'high');
  58  parameter
  59  *up numbers
  60   
  61  *this is addition to node that occurs for rise of 2000 feet and forward travel of 6 nautical miles node addn = 2*100 + 6 = 206
  62    offsetup(upheight) how far does it take to go up 2000 feet in nautical miles insert as in 2*length(x)+ distance in nautical miles
  63  *down numbers
  64   
  65  *this is addition to node that occurs for drop of 2000 feet and forward travel of 10 nautical miles node addn = -2*100 + 10 = -190
  66    offsetdown how far does it takes to go down 2000 feet in nautical miles insert as 2*length(x) - distance in nautical miles
  67    ;
  68   offsetup(upheight)=2*100+climbDis(upheight);
  69    offsetdown=-2*100+descendDis('1');
  70  alias(Nodes,I,J);
  71  alias(N, N1, N2);
  72   
  73  *set up parameters for xcoord and y coord
  74  xcoord(Nodes) = mod(ord(Nodes), 100);
  75  zcoord(Nodes) = Groundheight + floor( (ord(Nodes)-1)/100)
  76   
  77  display xcoord;
  78  display zcoord;
  79   
  80  *set up arcs below
  81   
  82  * Put arcs from start to first nodes @ free cost
  83  Arcs('start','801')=yes;
  84  c('start','801')=0;
  85   
  86  * Put arc from last node to finish @ free cost
  87  Arcs('899','finish')=yes;
  88  C('finish','899')=0;
  89   
  90  *Put arcs for cruise @ cost crcost
  91  Arcs(N1,N) $((ord(N) = (ord(N1)+offsetcr('1'))) and ord(N) gt minheight) =yes;
  92  *c(N1,N) $(ord(N) = (ord(N1)+offsetcr)) = crcost;
  93  c(N1,N) $((ord(N) = (ord(N1)+offsetcr('1'))) AND (ord(N) ge 200) AND(ord(N) le 299)) = crcost('2');
  94  c(N1,N) $((ord(N) = (ord(N1)+offsetcr('1'))) AND (ord(N) ge 400) AND(ord(N) le 499)) = crcost('4');
  95  c(N1,N) $((ord(N) = (ord(N1)+offsetcr('1'))) AND (ord(N) ge 600) AND(ord(N) le 699)) = crcost('6');
  96  c(N1,N) $((ord(N) = (ord(N1)+offsetcr('1'))) AND (ord(N) ge 800) AND(ord(N) le 899)) = crcost('8');
  97  c(N1,N) $((ord(N) = (ord(N1)+offsetcr('1'))) AND (ord(N) ge 1000) AND(ord(N) le 1099)) = crcost('10');
  98  c(N1,N) $((ord(N) = (ord(N1)+offsetcr('1'))) AND (ord(N) ge 1200) AND(ord(N) le 1299)) = crcost('12');
  99   
 100  *Put arcs for climb rate climbout @ cost upcost
 101  *Arcs(N1,N) $(ord(N) = (ord(N1)+offsetup)) =yes;
 102  *c(N1,N) $(ord(N) = (ord(N1)+offsetup)) =upcost;
 103   
 104  Arcs(N1,N)$((ord(N) = (ord(N1)+offsetup('2')) AND (ord(N) ge 200) AND(ord(N) le 399))) =yes;
 105  c(N1,N)$((ord(N) = (ord(N1)+offsetup('2'))) AND (ord(N) ge 200) AND(ord(N) le 399)) =upcost('2');
 106   
 107  Arcs(N1,N)$((ord(N) = (ord(N1)+offsetup('4'))) AND (ord(N) ge 400) AND(ord(N) le 599)) =yes;
 108  c(N1,N)$((ord(N) = (ord(N1)+offsetup('4'))) AND (ord(N) ge 400) AND(ord(N) le 599)) =upcost('4');
 109   
 110  Arcs(N1,N)$((ord(N) = (ord(N1)+offsetup('6'))) AND (ord(N) ge 600) AND(ord(N) le 799)) =yes;
 111  c(N1,N)$((ord(N) = (ord(N1)+offsetup('6'))) AND (ord(N) ge 600) AND(ord(N) le 799)) =upcost('6');
 112   
 113  Arcs(N1,N)$((ord(N) = (ord(N1)+offsetup('8'))) AND (ord(N) ge 800) AND(ord(N) le 999)) =yes;
 114  c(N1,N)$((ord(N) = (ord(N1)+offsetup('8'))) AND (ord(N) ge 800) AND(ord(N) le 999)) =upcost('8');
 115   
 116  Arcs(N1,N)$((ord(N) = (ord(N1)+offsetup('10'))) AND (ord(N) ge 1000) AND(ord(N) le 1299)) =yes;
 117  c(N1,N)$((ord(N) = (ord(N1)+offsetup('10'))) AND (ord(N) ge 1000) AND(ord(N) le 1299)) =upcost('10');
 118   
 119  *Put arcs for decsent rate descent @ cost downcost
 120  Arcs(N1,N) $((ord(N) = (ord(N1)+offsetdown)) AND (ord(N) GT minheight  ) ) =yes;
 121  *c(N1,N) $((ord(N) = (ord(N1)+offsetdown)) AND (ord(N) GT minheight)  ) =downcost;
 122  c(N1,N) $((ord(N) = (ord(N1)+offsetdown))  AND(ord(N) ge 200) AND(ord(N)le 499 )  ) =downcost('4');
 123  c(N1,N) $((ord(N) = (ord(N1)+offsetdown))  AND(ord(N) ge 500) AND(ord(N)le 699 ) ) =downcost('6');
 124  c(N1,N) $((ord(N) = (ord(N1)+offsetdown))  AND(ord(N) ge 700) AND(ord(N)le 899 ) ) =downcost('8');
 125  c(N1,N) $((ord(N) = (ord(N1)+offsetdown))  AND(ord(N) ge 900) AND(ord(N)le 1099 ) ) =downcost('10');
 126  c(N1,N) $((ord(N) = (ord(N1)+offsetdown))  AND(ord(N) ge 1100) AND(ord(N)le 1299 ) ) =downcost('12');
 127   
 128  *Need to insert cloud and stop arc from entering node where cloud is
 129  Arcs(N,N2)$((lowcloud('c1')le (zcoord(N)+(zcoord(N2)-zcoord(N))/(xcoord(N2)-xcoord(N))*(xcoordcloud('c1')-xcoord(N))))
 130             AND ((zcoord(N)+((zcoord(N2)-zcoord(N))/(xcoord(N2)-xcoord(N))*(xcoordcloud('c1')-xcoord(N)))) le (highcloud('c1')))
 131             AND xcoord(N) le xcoordcloud('c1') AND xcoord(N2) ge xcoordcloud('c1'))=no;
 132   
 133   
 134  Arcs(N,N2)$((lowcloud('c2')le (zcoord(N)+((zcoord(N2)-zcoord(N))/(xcoord(N2)-xcoord(N))*(xcoordcloud('c2')-xcoord(N)))))
 135             AND ((zcoord(N)+((zcoord(N2)-zcoord(N))/(xcoord(N2)-xcoord(N))*(xcoordcloud('c2')-xcoord(N)))) le (highcloud('c2')))
 136             AND xcoord(N) le xcoordcloud('c2') AND xcoord(N2) ge xcoordcloud('c2'))=no;
 137   
 138  Arcs(N,N2)$((lowcloud('c3')le (zcoord(N)+((zcoord(N2)-zcoord(N))/(xcoord(N2)-xcoord(N))*(xcoordcloud('c2')-xcoord(N)))))
 139             AND ((zcoord(N)+((zcoord(N2)-zcoord(N))/(xcoord(N2)-xcoord(N))*(xcoordcloud('c3')-xcoord(N)))) le (highcloud('c3')))
 140             AND xcoord(N) le xcoordcloud('c3') AND xcoord(N2) ge xcoordcloud('c3'))=no;
 141   
 142  display Arcs;
 143  display c;
 144   
 145  * Nodes should demand 0.
 146  b(N) = 0 ;
 147   
 148  *Need to pass flow of 1 from start to finish
 149  b('start') =1;
 150  b('finish')=-1;
 151  display b;
 152   
 153  * It's just MCNF.
 154   
 155  variables flow(nodes,nodes), totalcost;
 156  positive variables flow;
 157  equations balance(nodes), objective;
 158   
 159  balance(nodes)..
 160          sum(arcs(nodes,j), flow(nodes,j)) - sum(arcs(i,nodes), flow(i,nodes))
 161            =e= b(nodes);
 162   
 163  objective..
 164          totalcost =e= sum(arcs, flow(arcs) * c(arcs));
 165   
 166  *option lp = MOSEK;
 167   
 168  model airplane /all/;
 169  solve airplane using lp minimizing TotalCost ;
 170   
 171  *shows what arcs airplane should travel on.
 172  option flow:0:0:1;
 173  display flow.l;
 174  set
 175      heightHeader /low,high,xcoord, zcoord,cloudx,status/;
 177  table FlowOP(CandN,CandN, heightHeader) 'Flow';
 178  Scalar Cost;
 180   Cost = TotalCost.L;
 181   FlowOP(N,Nodes, 'zcoord')$(flow.l(N,Nodes))=Groundheight + floor( (ord(N)-1)/100);
 182   flowOP(N,Nodes, 'xcoord')$(flow.l(N,Nodes))=mod(ord(N),100);
 183  FlowOP(clouds,clouds,'low')=lowcloud(clouds);
 184  FlowOp(clouds,clouds,'high')=highcloud(clouds);
 185  FlowOp(clouds,clouds,'cloudx')=xcoordcloud(clouds);
 186  FlowOP(CandN,CandN, 'status')=airplane.sumInfes+1;
 187  display FlowOP;


COMPILATION TIME     =        0.000 SECONDS      3 MB  30.2.0 r482c588 WEX-WEI


USER: CS526 Advanced Linear Programming              G200210/0001AS-GEN
      Course License UW-Madison, Prof Ferris, Spring 2020        DCE515
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\hasee\Documents\GitHub\GAMS-MIRO\Thundercloud\thunder.gms
Output     C:\Users\hasee\Documents\GitHub\GAMS-MIRO\Thundercloud\thunder.lst
